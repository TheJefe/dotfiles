PATH=/usr/local/bin:$PATH
PATH=/usr/local/sbin:$PATH
PATH=$PATH:~/scripts

if [ -f ~/.bashrc ]; then
  source ~/.bashrc
fi

# Default Editor
export EDITOR=vim

### Setup for pghelper
export PGHOST=localhost

### Added by the Heroku Toolbelt
export PATH="/usr/local/heroku/bin:$PATH"
alias herkou="heroku"

# change terminal
#export PS1="\w$ "

## Liquid prompt
source ~/git/liquidprompt/liquidprompt

## tmuxinator autocompletion
source ~/.tmuxinator.bash
alias mux='tmuxinator'
alias md='mux default'

RED="\[\033[0;31m\]"
YELLOW="\[\033[0;33m\]"
GREEN="\[\033[0;32m\]"
NO_COLOUR="\[\033[0m\]"

#PS1="$NO_COLOUR:\w$YELLOW\$(parse_git_branch)$NO_COLOUR\$ "

if [ -f $(brew --prefix)/share/bash-completion/bash_completion ]; then
  . $(brew --prefix)/share/bash-completion/bash_completion
fi

# use vi bindings on the terminal
set -o vi

#improve auto complete
set completion-ignore-case on
set show-all-if-ambiguous on

# improve ruby performance
export RUBY_GC_HEAP_INIT_SLOTS=1000000
export RUBY_HEAP_FREE_MIN=500000
export RUBY_HEAP_SLOTS_INCREMENT=1000000
export RUBY_HEAP_SLOTS_GROWTH_FACTOR=1
export RUBY_GC_MALLOC_LIMIT=100000000
export RUBY_GC_HEAP_FREE_SLOTS=20000

function la {
  ls -alh $1
}

function cf {
  cd -P $1
}

function fd {
for FILE in "$@"
do
  echo $FILE
  grep "$1" $FILE
done | mvim -
}

function kr {
killall -9 ruby
}

function v() {
  $@ | vim -R -
}

# Test Branch: this sets me up to test a particular branch the way I like
function tb() {
  git checkout rc
  git reset --hard origin/rc
  git pull
  git pull --no-ff --no-edit origin $@
}

# shortcut for rails console
function rc() {
if [ -z "$@" ]; then
  rails c
else
  ttmscalr rails_c -f $@
fi
}

# this is just a nicer way of greping for a process
function psgrep(){
  ps aux | grep $@
}

# Special kill will find processes matching a regex and 'kill -9' them
function skill(){
  pgrep -f $@ | xargs kill -9
}

#### share history across terminal sessions
# avoid duplicates..
export HISTCONTROL=ignoredups:erasedups
# append history entries..
shopt -s histappend

# git alias
alias gs="git status"
alias gss='git status -s'
alias gc="git checkout"
alias gp="git pull"
alias gl="git log --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(blue)<%an>%Creset' --abbrev-commit"
alias gb="git branch"
alias gd="git diff"
alias gf="git fetch"
alias show="git show"
alias gcontains="git branch -r --contains"
alias gr='git reset --hard'
alias grr="git reset --hard origin/rc"
alias gpn="git pull --no-ff origin"
alias gg="git grep --break --heading --line-number"
alias gsu="git submodule update --init --recursive"

# command correction tool
# https://github.com/nvbn/thefuck
alias fuck='eval $(thefuck $(fc -ln -1)); history -r'

# sets up gc for auto-complete
__git_complete gc _git_checkout
__git_complete gp _git_pull
__git_complete gpn _git_pull
__git_complete gl _git_log
__git_complete gb _git_branch
__git_complete gd _git_branch
__git_complete tb _git_checkout
__git_complete gr _git_checkout
# tb is a fuction used for setting up a specific branch to be tested locally

# this must be defined AFTER 'gl' is aliased
function gly() {
if [[ "1" == "$(date +%u)" ]]
  then
    yesterworkday="last friday"
  else
    yesterworkday="yesterday"
fi
gl --since=${yesterworkday}
}

# show list of directories
alias d='ls -l | grep ^d'

function gi() {
  /git/gi/gi "$@";
  if [ -s issues.html ]
  then
    open issues.html;
    sleep 2;
    rm issues.html;
  fi
}

# removes all merged branches except rc master and the current branch
function branch_cleanup() {
  git branch --merged | grep -v "\*\|rc\|master" | xargs -n 1 git branch -d
  git fetch -p
}

# returns my ipaddress
function ip() {
  ifconfig | grep -E "([0-9]{1,3}\.){3}[0-9]{1,3}" | grep -v 127.0.0.1 | awk '{ print $2 }' | cut -f2 -d:
}

# start a python project
function start() {
  workon $@
  mux pack
  deactivate
  cd
  clear
}

alias cc="cd;clear"

alias retag="ctags -R --exclude=.svn --exclude=.git --exclude=node_modules --exclude=tmp *"
alias eretag="ctags -e -R --extra=+f --exclude=.git --exclude=log --exclude=*min.js --exclude=*.data --exclude=*.dump --exclude=".*" --exclude="*vendor*.js" --exclude=*.svg --exclude=*.png--exclude=*.yml --exclude=node_modules/* --exclude=bower_components/* --exclude=public* --exclude=dist/* --exclude=test/artifacts/* --exclude=spec/* --exclude=coverage/* *"

# Navigation aliases
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."
alias ~="cd ~"
alias -- -="cd -"

# used for virtualenv
export PROJECT_HOME=$HOME/Projects
export NLTK_DATA=$HOME/nltk_data
export WORKON_HOME=$HOME/.virtualenvs
source /usr/local/bin/virtualenvwrapper.sh

if [ -f /usr/local/bin/virtualenvwrapper.sh ]; then
  . /usr/local/bin/virtualenvwrapper.sh
fi

if [ -f /usr/local/opt/autoenv/activate.sh ]; then
  grep autoenv ~/.rvm/hooks/after_cd > /dev/null
  if  [ $? != 0 ]; then
    echo "you need add autoenv_init to '~/.rvm/hooks/after_cd'"
    echo "more info can be found here: https://github.com/kennethreitz/autoenv/issues/45#issuecomment-18232652"
  fi

  source $(brew --prefix autoenv)/activate.sh
fi
export AUTOENV_ENV_FILENAME=.autoenv

function frameworkpython {
    if [[ ! -z "$VIRTUAL_ENV" ]]; then
        PYTHONHOME=$VIRTUAL_ENV /usr/bin/python "$@"
    else
        /usr/bin/python "$@"
    fi
}

alias clear_py_cache="find . | grep -E '(__pycache__|\.pyc|\.pyo$)' | xargs rm -rf"
# another way?
#alias clear_py_cache='find . -type d -name __pycache__ -exec rm -rf {} \;'

# Tii specific environment variable
export PINTSIDE_POS_THREADS=1
export CHESHIRE_CONTENT=${PROJECT_HOME}/hamlet

# This runs a shell script that returns temporary keys that need to be added to the current environment
# This is specificly tied to Tii things
function assume() {
    eval $(assume_role $@ 3600|grep ^export)
}
# Used to share temporary keys across sessions
alias gk='export `cat ~/.custom_keys`'

if [ -f /usr/local/bin/aws_completer ]; then
  complete -C '/usr/local/bin/aws_completer' aws
fi

# Docker stuff
# Delete all stopped containers.
alias dpa='docker ps -a'
alias di='docker images'
alias drmi='docker rmi'
complete -F _docker_rmi drmi
alias dr='docker run'
alias dri='docker run -it'
alias db='docker build'

dclean() {
  printf "\n>>> Deleting stopped containers\n\n"
  docker rm $(docker ps -a -q)

  printf "\n>>> Deleting untagged images\n\n"
  docker rmi $(docker images | grep "^<none>" | awk "{print $3}")

}
alias dockerclean=dclean

# Bash into running container
dbash() { docker exec -it $(docker ps -aqf "name=^/$1\$") bash; }
complete -F _docker_exec dbash

# Dockerfile build, e.g., $dbu tcnksm/test
dbu() { docker build -t=$1 .; }


[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
