# Add homebrew to path
eval "$(/opt/homebrew/bin/brew shellenv)"
if [ -f /usr/local/opt/python/libexec/bin/python ]; then # brew symlinks python to a weird place
  PATH=/usr/local/opt/python/libexec/bin:$PATH
fi
PATH=/usr/local/bin:$PATH
PATH=/usr/local/sbin:$PATH
PATH=$PATH:~/scripts

# Default Editor
export EDITOR=vim

### Setup for pghelper
export PGHOST=localhost

### Added by the Heroku Toolbelt
export PATH="/usr/local/heroku/bin:$PATH"
alias herkou="heroku"

### NVIM
alias vim=nvim

# change terminal
#export PS1="\w$ "

## Liquid prompt
#lppath=~/git/liquidprompt/liquidprompt
#if [ -f ${lppath} ]; then
  #source ${lppath}
#else
  #echo "liquidprompt no found at ${lppath}"
#fi

# Starship
eval "$(starship init bash)"

## tmuxinator autocompletion
source ~/.tmuxinator.bash
alias mux='tmuxinator'
alias md='mux default'

brew_prefix=$(brew --prefix)
if [ -f ${brew_prefix}/share/bash-completion/bash_completion ]; then
  . ${brew_prefix}/share/bash-completion/bash_completion
fi

# use vi bindings on the terminal
set -o vi

#improve auto complete
set completion-ignore-case on
set show-all-if-ambiguous on

if command -v pyenv 1>/dev/null 2>&1; then
  eval "$(pyenv init -)"
fi

# Powerline, used by VIM and TMUX
export POWERLINE_DIR=$(pip show powerline-status | grep Location | cut -d " " -f 2)

# improve ruby performance
export RUBY_GC_HEAP_INIT_SLOTS=1000000
export RUBY_HEAP_FREE_MIN=500000
export RUBY_HEAP_SLOTS_INCREMENT=1000000
export RUBY_HEAP_SLOTS_GROWTH_FACTOR=1
export RUBY_GC_MALLOC_LIMIT=100000000
export RUBY_GC_HEAP_FREE_SLOTS=20000

# golang
export GOPATH="${HOME}/go"
export PATH="${GOPATH}/bin:$PATH"
function la {
  ls -alh $1
}

function cf {
  cd -P $1
}

function fd {
for FILE in "$@"
do
  echo $FILE
  grep "$1" $FILE
done | mvim -
}

function kr {
killall -9 ruby
}

function v() {
  $@ | vim -R -
}

# Test Branch: this sets me up to test a particular branch the way I like
function tb() {
  git checkout rc
  git reset --hard origin/rc
  git pull
  git pull --no-ff --no-edit origin $@
}

# this is just a nicer way of greping for a process
function psgrep(){
  ps aux | grep -i $@
}

# Special kill will find processes matching a regex and 'kill -9' them
function skill(){
  pgrep -f $@ | xargs kill -9
}

# Depends on bastion being defined in ~/.ssh/config
function sshb() {
    ssh "$@" -o "proxycommand ssh -W %h:%p bastion"
}

# Conditional load
function loadIfExists(){
    [ -f "$@" ] && . "$@"
}

# Kubernetes
source <(kubectl completion bash) # auto-complete
export KUBECONFIG=~/.kube/kubeconfig
alias k='kubectl'
complete -F __start_kubectl k

# Bash into running pod
kbash() { kubectl exec --stdin --tty "$@" -- /bin/bash; }

loadIfExists ~/.bashrc

#### share history across terminal sessions
# avoid duplicates..
export HISTCONTROL=ignoredups:erasedups
# append history entries..
shopt -s histappend

# bash hisotry size
export HISTFILESIZE=100000

# git alias
alias gs="git status"
alias gss='git status -s'
alias gc="git checkout"
alias gp="git pull"
alias gl="git log --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(blue)<%an>%Creset' --abbrev-commit"
alias gb="git branch"
alias gd="git diff"
alias gf="git fetch"
alias show="git show"
alias gcontains="git branch -r --contains"
alias gr='git reset --hard'
alias grr="git reset --hard origin/rc"
alias gpn="git pull --no-ff origin"
alias gg="git grep --break --heading --line-number"
alias gsu="git submodule update --init --recursive"

# command correction tool
# https://github.com/nvbn/thefuck
alias fuck='eval $(thefuck $(fc -ln -1)); history -r'

# sets up gc for auto-complete
__git_complete gc _git_checkout
__git_complete gp _git_pull
__git_complete gpn _git_pull
__git_complete gl _git_log
__git_complete gb _git_branch
__git_complete gd _git_branch
__git_complete tb _git_checkout
__git_complete gr _git_checkout
# tb is a fuction used for setting up a specific branch to be tested locally

# this must be defined AFTER 'gl' is aliased
function gly() {
if [[ "1" == "$(date +%u)" ]]
  then
    yesterworkday="last friday"
  else
    yesterworkday="yesterday"
fi
gl --since=${yesterworkday}
}

# show list of directories
alias d='ls -l | grep ^d'
alias cat='bat'

function gi() {
  /git/gi/gi "$@";
  if [ -s issues.html ]
  then
    open issues.html;
    sleep 2;
    rm issues.html;
  fi
}

# removes all merged branches except rc master and the current branch
function branch_cleanup() {
  git branch --merged | grep -v "\*\|rc\|master\|main" | xargs -n 1 git branch -d
  git fetch -p
}

# returns my ipaddress
function ip() {
  ifconfig | grep -E "([0-9]{1,3}\.){3}[0-9]{1,3}" | grep -v 127.0.0.1 | awk '{ print $2 }' | cut -f2 -d:
}

# start a python project
function start() {
  workon $@
  mux pack
  deactivate
  cd
  clear
}

alias cc="cd;clear"

alias retag="ctags -R --exclude=.svn --exclude=.git --exclude=node_modules --exclude=tmp *"
alias eretag="ctags -e -R --extra=+f --exclude=.git --exclude=log --exclude=*min.js --exclude=*.data --exclude=*.dump --exclude=".*" --exclude="*vendor*.js" --exclude=*.svg --exclude=*.png--exclude=*.yml --exclude=node_modules/* --exclude=bower_components/* --exclude=public* --exclude=dist/* --exclude=test/artifacts/* --exclude=spec/* --exclude=coverage/* *"

# Navigation aliases
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."
alias ~="cd ~"
alias -- -="cd -"

# used for virtualenv
export PROJECT_HOME=$HOME/git
export WORKON_HOME=$HOME/.virtualenvs

loadIfExists "/usr/local/bin/virtualenvwrapper.sh"

function frameworkpython {
    if [[ ! -z "$VIRTUAL_ENV" ]]; then
        PYTHONHOME=$VIRTUAL_ENV /usr/bin/python "$@"
    else
        /usr/bin/python "$@"
    fi
}

alias clear_py_cache="find . | grep -E '(__pycache__|\.pyc|\.pyo$)' | xargs rm -rf"

# Used to share temporary keys across sessions
## Not currently used and alias is needed for other things
# alias gk='export `cat ~/.custom_keys`'

if [ -f /usr/local/bin/aws_completer ]; then
  complete -C '/usr/local/bin/aws_completer' aws
fi

# set the default backend for aws-vault
export AWS_VAULT_BACKEND=file

# Docker stuff
# Delete all stopped containers.
alias dpa='docker ps -a'
alias di='docker images'
complete -F _docker_images di
alias drmi='docker rmi'
complete -F _docker_rmi drmi
alias dr='docker run'
alias dri='docker run -it --rm --entrypoint ""'
complete -F _docker_run dri
complete -F _docker_run dr
alias db='docker build'
complete -F _docker_build db
alias dl='docker logs'
complete -F _docker_logs dl
alias dlf='docker logs -f'
complete -F _docker_logs dlf

# Docker-compose
alias dcu='docker-compose up -d'
alias dcd='docker-compose down'
alias dcr='docker-compose restart'

dclean() {
  printf "\n>>> Deleting stopped containers\n\n"
  docker rm $(docker ps -a -q)

  printf "\n>>> Deleting untagged images\n\n"
  docker system prune -f

  printf "\n>>> Deleting dangling volumes\n\n"
  docker volume rm $(docker volume ls -q -f dangling=true)
}
alias dockerclean=dclean

# Bash into running container
dbash() { docker exec -it $(docker ps -aqf "name=^/$1\$") bash; }
complete -F _docker_exec dbash

# Dockerfile build, e.g., $dbu tcnksm/test
dbu() { docker build -t=$1 .; }

# Use fuzzy finder
loadIfExists ~/.fzf.bash

# Startup command to get tmux the way I like
alias ts="tmux attach-session -t _hacking || tmux new-session -s _hacking -n neo"

# Function to decode the payload of a jwt locally
jwt-decode () {
	jq -R 'split(".") | .[1] | @base64d | fromjson' <<< "$1"
}

# gatekeeper firefox profile
gkff() {
  GK_URL=`gk c -u -p "$@"` && /Applications/Firefox.app/Contents/MacOS/firefox -no-remote -CreateProfile "$@" &> /dev/null && /Applications/Firefox.app/Contents/MacOS/firefox -P "$@" $GK_URL &> /dev/null &
}

# Function for cleaning up artifactory labels more quickly
apd() {
  curl -u${ARTIFACTORY_USERNAME}:${ARTIFACTORY_TOKEN} -XDELETE "https://a0us.jfrog.io/artifactory/api/storage/docker-local/docker/$1?properties=docker.label.com.jfrog.artifactory.retention.maxDays&recursive=1"
}

# Function helps managing the kubectl profile with env vars
function kp() {
  kubectx $1
  unset KUBECTL_PROFILE
  export KUBECTL_PROFILE=$(kubectx -c):$(kubens -c)
}
function kpn() {
  kubens $1
  unset KUBECTL_PROFILE
  export KUBECTL_PROFILE=$(kubectx -c):$(kubens -c)
}
function kp0() {
  unset KUBECTL_PROFILE
}

loadIfExists "$HOME/.rvm/scripts/rvm"

export PATH="/opt/homebrew/opt/openjdk/bin:$PATH"

# Hack to fix git autocomplete. this line should not be necessary
# loadIfExists "/usr/local/etc/bash_completion.d/git-completion.bash"
loadIfExists "/opt/homebrew/etc/profile.d/bash_completion.sh"
[[ -r "/usr/local/etc/profile.d/bash_completion.sh" ]] && . "/usr/local/etc/profile.d/bash_completion.sh"
loadIfExists "/opt/homebrew/etc/bash_completion.d/git-completion.bash"

loadIfExists "$(brew --prefix asdf)/libexec/asdf.sh"

# Add psql to the path
export PATH="/opt/homebrew/opt/libpq/bin:$PATH"

# Add openjdk to the path. Installed by brew
export PATH="/usr/local/opt/openjdk/bin:$PATH"

# Add grep and others from homebrew to path
export PATH="/opt/homebrew/opt/grep/libexec/gnubin:$PATH"
export PATH="/opt/homebrew/opt/make/libexec/gnubin:$PATH"

export PATH=/git/bats-core/bin:$PATH

# wrappers around functions to perform setup tasks
# this form of wrapping allows this to be used for makefiles as well
if  command -v npm &> /dev/null && command -v op &> /dev/null ; then
  export NPM_PATH=$(which npm)
  export PATH=$(dirname $(readlink $BASH_SOURCE))/bin:$PATH
fi
# Set default parameters for pandoc
alias pandoc="pandoc -f gfm"
