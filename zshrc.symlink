# Path to your oh-my-zsh installation.
#export ZSH=$HOME/.oh-my-zsh

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
ZSH_THEME="robbyrussell"

eval $(thefuck --alias) 

# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to disable command auto-correction.
# DISABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
plugins=(
  zsh-autosuggestions
  git
  mycustom
  postgres
)

#source $ZSH/oh-my-zsh.sh

autoload -Uz compinit
compinit

# User configuration

# ignore history prefixed with a space
setopt HIST_IGNORE_SPACE

export PATH=$PATH:~/scripts
export PATH=$HOME/bin:/usr/local/bin:$PATH
export GOPATH="${HOME}/go"
export PATH="${GOPATH}/bin:$PATH"
export PATH=$PATH:~/.asdf/shims

function loadIfExists(){
    [ -f "$@" ] && . "$@"
}

# Starship
eval "$(starship init zsh)"

alias cat='bat'

# Startup command to get tmux the way I like
alias ts="tmux attach-session -t _hacking || tmux new-session -s _hacking -n neo"

if command -v pyenv 1>/dev/null 2>&1; then
  eval "$(pyenv init -)"
fi

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

brew_prefix=$(brew --prefix)
loadIfExists ${brew_prefix}/share/zsh-autosuggestions/zsh-autosuggestions.zsh
setopt auto_cd

function la {
    ls -alh $1
}

# returns my ipaddress
function ip() {
    ifconfig | grep -E "([0-9]{1,3}\.){3}[0-9]{1,3}" | grep -v 127.0.0.1 | awk '{ print $2 }' | cut -f2 -d:
}

# 1password
function 1p {
    eval $(op signin)
}

function p {
    cd ~/git/$1
    tmuxinator default
}

# Special kill will find processes matching a regex and 'kill -9' them
function skill(){
  pgrep -f $@ | xargs kill -9
}

# Kubernetes
# Load the kubectl completion code for zsh[1] into the current shell
#source <(kubectl completion zsh)
export KUBECONFIG=~/.kube/kubeconfig
alias k='kubectl'

# Set the kubectl completion code for zsh[1] to autoload on startup
#kubectl completion zsh > "${fpath[1]}/_kubectl"

# Bash into running pod
kbash() { kubectl exec --stdin --tty "$@" -- /bin/bash; }

alias cc="cd;clear"

# git alias
alias gs="git status"
alias gss='git status -s'
alias gc="git checkout"
alias gp="git pull"
alias gl="git log --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(blue)<%an>%Creset' --abbrev-commit"
alias gb="git branch"
alias gd="git diff"
alias gf="git fetch"
alias show="git show"
alias gcontains="git branch -r --contains"
alias gr='git reset --hard'
alias grr="git reset --hard origin/rc"
alias gpn="git pull --no-ff origin"
alias gg="git grep --break --heading --line-number"
alias gsu="git submodule update --init --recursive"


# Docker stuff
# Delete all stopped containers.
alias dpa='docker ps -a'
alias di='docker images'
alias drmi='docker rmi'
alias dr='docker run'
alias dri='docker run -it --rm --entrypoint ""'
alias db='docker build'
alias dl='docker logs'
alias dlf='docker logs -f'

# Docker-compose
alias dcu='docker-compose up -d'
alias dcd='docker-compose down'
alias dcr='docker-compose restart'

dclean() {
  printf "\n>>> Deleting stopped containers\n\n"
  docker rm $(docker ps -a -q)

  printf "\n>>> Deleting untagged images\n\n"
  docker system prune -f

  printf "\n>>> Deleting dangling volumes\n\n"
  docker volume rm $(docker volume ls -q -f dangling=true)
}
alias dockerclean=dclean

# Bash into running container
dbash() { docker exec -it $(docker ps -aqf "name=^/$1\$") bash; }
#complete -F _docker_exec dbash

# Dockerfile build, e.g., $dbu tcnksm/test
dbu() { docker build -t=$1 .; }

# Function helps managing the kubectl profile with env vars
function kp() {
  kubectx $1
  unset KUBECTL_PROFILE
  export KUBECTL_PROFILE=$(kubectx -c):$(kubens -c)
}
function kpn() {
  kubens $1
  unset KUBECTL_PROFILE
  export KUBECTL_PROFILE=$(kubectx -c):$(kubens -c)
}
function kp0() {
  unset KUBECTL_PROFILE
}

# 'jj' switches to vim normal mode
bindkey -M viins 'jj' vi-cmd-mode

#eval "$(direnv hook zsh)"
